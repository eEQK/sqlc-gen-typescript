// Code generated by sqlc. DO NOT EDIT.

import { QueryArrayConfig, QueryArrayResult } from "pg";

interface Client {
    query: (config: QueryArrayConfig) => Promise<QueryArrayResult>;
}

export module Read {
    const getAuthorQuery = `-- name: Read_GetAuthor :one
SELECT id, name, bio FROM authors
WHERE id = $1 LIMIT 1`;
    export interface GetAuthorArgs {
        id: string;
    }
    export interface GetAuthorRow {
        id: string;
        name: string;
        bio: string | null;
    }
    export async function getAuthor(client: Client, args: GetAuthorArgs): Promise<GetAuthorRow | null> {
        const result = await client.query({
            text: getAuthorQuery,
            values: [args.id],
            rowMode: "array"
        });
        if (result.rows.length !== 1) {
            return null;
        }
        const row = result.rows[0];
        return {
            id: row[0],
            name: row[1],
            bio: row[2]
        };
    }
    const listAuthorsQuery = `-- name: Read_ListAuthors :many
SELECT id, name, bio FROM authors
ORDER BY name`;
    export interface ListAuthorsRow {
        id: string;
        name: string;
        bio: string | null;
    }
    export async function listAuthors(client: Client): Promise<ListAuthorsRow[]> {
        const result = await client.query({
            text: listAuthorsQuery,
            values: [],
            rowMode: "array"
        });
        return result.rows.map(row => {
            return {
                id: row[0],
                name: row[1],
                bio: row[2]
            };
        });
    }
    export module Nested {
        const listQuery = `-- name: Read_Nested_List :many
SELECT id, name, bio FROM authors
ORDER BY name`;
        export interface ListRow {
            id: string;
            name: string;
            bio: string | null;
        }
        export async function list(client: Client): Promise<ListRow[]> {
            const result = await client.query({
                text: listQuery,
                values: [],
                rowMode: "array"
            });
            return result.rows.map(row => {
                return {
                    id: row[0],
                    name: row[1],
                    bio: row[2]
                };
            });
        }
    }
}

